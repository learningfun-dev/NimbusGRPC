// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: nimbus.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NimbusService_ProcessEvent_FullMethodName = "/nimbus.NimbusService/ProcessEvent"
)

// NimbusServiceClient is the client API for NimbusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NimbusServiceClient interface {
	ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventRequest, EventResponse], error)
}

type nimbusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNimbusServiceClient(cc grpc.ClientConnInterface) NimbusServiceClient {
	return &nimbusServiceClient{cc}
}

func (c *nimbusServiceClient) ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventRequest, EventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NimbusService_ServiceDesc.Streams[0], NimbusService_ProcessEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventRequest, EventResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NimbusService_ProcessEventClient = grpc.BidiStreamingClient[EventRequest, EventResponse]

// NimbusServiceServer is the server API for NimbusService service.
// All implementations must embed UnimplementedNimbusServiceServer
// for forward compatibility.
type NimbusServiceServer interface {
	ProcessEvent(grpc.BidiStreamingServer[EventRequest, EventResponse]) error
	mustEmbedUnimplementedNimbusServiceServer()
}

// UnimplementedNimbusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNimbusServiceServer struct{}

func (UnimplementedNimbusServiceServer) ProcessEvent(grpc.BidiStreamingServer[EventRequest, EventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedNimbusServiceServer) mustEmbedUnimplementedNimbusServiceServer() {}
func (UnimplementedNimbusServiceServer) testEmbeddedByValue()                       {}

// UnsafeNimbusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NimbusServiceServer will
// result in compilation errors.
type UnsafeNimbusServiceServer interface {
	mustEmbedUnimplementedNimbusServiceServer()
}

func RegisterNimbusServiceServer(s grpc.ServiceRegistrar, srv NimbusServiceServer) {
	// If the following call pancis, it indicates UnimplementedNimbusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NimbusService_ServiceDesc, srv)
}

func _NimbusService_ProcessEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NimbusServiceServer).ProcessEvent(&grpc.GenericServerStream[EventRequest, EventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NimbusService_ProcessEventServer = grpc.BidiStreamingServer[EventRequest, EventResponse]

// NimbusService_ServiceDesc is the grpc.ServiceDesc for NimbusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NimbusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nimbus.NimbusService",
	HandlerType: (*NimbusServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessEvent",
			Handler:       _NimbusService_ProcessEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nimbus.proto",
}
