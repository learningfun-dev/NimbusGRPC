// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: nimbus.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EventRequest is the message sent by clients to the server.
type EventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// event_name specifies the type of event, e.g., "sq" for square.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// number is the input value for the event processing.
	Number        int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	mi := &file_nimbus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nimbus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_nimbus_proto_rawDescGZIP(), []int{0}
}

func (x *EventRequest) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *EventRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

// EventResponse is the message sent by the server back to the client
// after processing an event directly or via Redis callback.
type EventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// event_name mirrors the name from the request.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// number mirrors the input number from the request.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// result is the outcome of the event processing.
	Result        int32 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	mi := &file_nimbus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nimbus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_nimbus_proto_rawDescGZIP(), []int{1}
}

func (x *EventResponse) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *EventResponse) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *EventResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// KafkaEventRequest is the message format used to send event details to a Kafka topic.
// It includes routing information for the response.
type KafkaEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// event_name specifies the type of event.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// number is the input value for the event processing.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// client_id identifies the originating client for response routing.
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// redis_channel is the Redis channel to which the processed result should be published.
	RedisChannel  string `protobuf:"bytes,4,opt,name=redis_channel,json=redisChannel,proto3" json:"redis_channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaEventRequest) Reset() {
	*x = KafkaEventRequest{}
	mi := &file_nimbus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaEventRequest) ProtoMessage() {}

func (x *KafkaEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nimbus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaEventRequest.ProtoReflect.Descriptor instead.
func (*KafkaEventRequest) Descriptor() ([]byte, []int) {
	return file_nimbus_proto_rawDescGZIP(), []int{2}
}

func (x *KafkaEventRequest) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *KafkaEventRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *KafkaEventRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KafkaEventRequest) GetRedisChannel() string {
	if x != nil {
		return x.RedisChannel
	}
	return ""
}

// KafkaEventResponse is the message format expected from the system that processes Kafka events.
// This message is typically published to Redis.
type KafkaEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// event_name mirrors the name from the request.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// number mirrors the input number from the request.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// result is the outcome of the event processing.
	Result int32 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	// client_id identifies the originating client to send the gRPC response to.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// redis_channel is the Redis channel from which this message was consumed (for logging/tracing).
	// Optional: could be inferred or not needed if the consumer only listens to one channel for this purpose.
	RedisChannel  string `protobuf:"bytes,5,opt,name=redis_channel,json=redisChannel,proto3" json:"redis_channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaEventResponse) Reset() {
	*x = KafkaEventResponse{}
	mi := &file_nimbus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaEventResponse) ProtoMessage() {}

func (x *KafkaEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nimbus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaEventResponse.ProtoReflect.Descriptor instead.
func (*KafkaEventResponse) Descriptor() ([]byte, []int) {
	return file_nimbus_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaEventResponse) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *KafkaEventResponse) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *KafkaEventResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *KafkaEventResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *KafkaEventResponse) GetRedisChannel() string {
	if x != nil {
		return x.RedisChannel
	}
	return ""
}

var File_nimbus_proto protoreflect.FileDescriptor

const file_nimbus_proto_rawDesc = "" +
	"\n" +
	"\fnimbus.proto\x12\x06nimbus\"E\n" +
	"\fEventRequest\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x16\n" +
	"\x06number\x18\x02 \x01(\x05R\x06number\"^\n" +
	"\rEventResponse\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x16\n" +
	"\x06number\x18\x02 \x01(\x05R\x06number\x12\x16\n" +
	"\x06result\x18\x03 \x01(\x05R\x06result\"\x8c\x01\n" +
	"\x11KafkaEventRequest\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x16\n" +
	"\x06number\x18\x02 \x01(\x05R\x06number\x12\x1b\n" +
	"\tclient_id\x18\x03 \x01(\tR\bclientId\x12#\n" +
	"\rredis_channel\x18\x04 \x01(\tR\fredisChannel\"\xa5\x01\n" +
	"\x12KafkaEventResponse\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x16\n" +
	"\x06number\x18\x02 \x01(\x05R\x06number\x12\x16\n" +
	"\x06result\x18\x03 \x01(\x05R\x06result\x12\x1b\n" +
	"\tclient_id\x18\x04 \x01(\tR\bclientId\x12#\n" +
	"\rredis_channel\x18\x05 \x01(\tR\fredisChannel2P\n" +
	"\rNimbusService\x12?\n" +
	"\fProcessEvent\x12\x14.nimbus.EventRequest\x1a\x15.nimbus.EventResponse(\x010\x01B4Z2github.com/learningfun-dev/NimbusGRPC/nimbus/protob\x06proto3"

var (
	file_nimbus_proto_rawDescOnce sync.Once
	file_nimbus_proto_rawDescData []byte
)

func file_nimbus_proto_rawDescGZIP() []byte {
	file_nimbus_proto_rawDescOnce.Do(func() {
		file_nimbus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nimbus_proto_rawDesc), len(file_nimbus_proto_rawDesc)))
	})
	return file_nimbus_proto_rawDescData
}

var file_nimbus_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nimbus_proto_goTypes = []any{
	(*EventRequest)(nil),       // 0: nimbus.EventRequest
	(*EventResponse)(nil),      // 1: nimbus.EventResponse
	(*KafkaEventRequest)(nil),  // 2: nimbus.KafkaEventRequest
	(*KafkaEventResponse)(nil), // 3: nimbus.KafkaEventResponse
}
var file_nimbus_proto_depIdxs = []int32{
	0, // 0: nimbus.NimbusService.ProcessEvent:input_type -> nimbus.EventRequest
	1, // 1: nimbus.NimbusService.ProcessEvent:output_type -> nimbus.EventResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_nimbus_proto_init() }
func file_nimbus_proto_init() {
	if File_nimbus_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nimbus_proto_rawDesc), len(file_nimbus_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nimbus_proto_goTypes,
		DependencyIndexes: file_nimbus_proto_depIdxs,
		MessageInfos:      file_nimbus_proto_msgTypes,
	}.Build()
	File_nimbus_proto = out.File
	file_nimbus_proto_goTypes = nil
	file_nimbus_proto_depIdxs = nil
}
